# -*- coding: utf-8 -*-
"""internship.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vxfMfkE3-H_39IvMzkJxZeT7r15jx43Z

# **level 1**

# **Task1: Top Cuisines**

# **Determine the top three most common cuisines in the dataset.**
"""

import pandas as pd
df = pd.read_csv("/content/Dataset .csv")
display(df.head())

df['Cuisines'].unique()

sum(df["Cuisines"].isna())

cuisine_counts=df["Cuisines"].str.split(', ').explode().value_counts()
top_three_cusines=cuisine_counts.head(3)
print(top_three_cusines)

"""# **Calculate the percentages of restaurants that serve each of the top cuisines.**

"""

total_restaurants = len(df["Restaurant Name"])
print(total_restaurants)

percentages = (top_three_cusines / total_restaurants)*100
print(percentages)

"""# **Task2: city analysis**

# **Identify the city with the highest number of restaurants in the dataset.**
"""

city_counts = df.groupby('City').size()
max_city=city_counts.idxmax()
max_count=city_counts.max()
print(f"the city with highest number of restaurants is {max_city} with {max_count}.")

"""# **Calculate the average rating for restaurants in each city.**"""

average_ratings = df.groupby('City')['Aggregate rating'].mean()
print(average_ratings)

"""# **Determine the city with the highest average rating.**"""

city_highest_rating = average_ratings.idxmax()
highest_rating=average_ratings.max()
print(f"the city with the highest average rating is {city_highest_rating} with an average rating of {highest_rating: .2f}")

"""# **Task3: Price Range Distribution**

# **Create a histogram or bar chart to visualize the distribution of price ranges among the restaurants.**
"""

import matplotlib.pyplot as plt
plt.figure(figsize=(8, 6))
plt.xlabel('Price Range')
plt.hist(df['Price range'], color='lightgreen', edgecolor='black')
plt.show()

"""# **Calculate the percentage of restaurants in each price range category.**"""

r=len(df["Restaurant Name"])
p=df["Price range"].value_counts()
percentage=(p/r)*100
print("percentage of restaurants in each price range:\n", percentage)

"""## **Task4: Online Delivery**

# **Determine the percentage of restaurants that offer online delivery.**
"""

r=len(df["Restaurant Name"])
d=df["Has Online delivery"].value_counts()
percentage=(d/r)*100
print(f"percentage of restaurants that offer online delivery:\n", percentage)

"""# **Compare the average ratings of restaurants with and without online delivery.**"""

online_delivery = df[df["Has Online delivery"] == 'Yes']
no_online_delivery = df[df["Has Online delivery"] == 'No']
avg_rating_online = online_delivery["Aggregate rating"].mean()
avg_rating_no_online = no_online_delivery["Aggregate rating"].mean()
print(f"Average rating for restaurants with online delivery: {avg_rating_online:.2f}")
print(f"Average rating for restaurants without online delivery: {avg_rating_no_online:.2f}")

"""## **level 2**

# **Task 1: Restaurant Ratings**

# **Analyze the distribution of aggregate ratings and determine the most common rating range.**
"""

p=df["Aggregate rating"].value_counts().sort_index()
plt.hist(df['Aggregate rating'], color='skyblue')
plt.xlabel('Rating')
plt.ylabel('Restaurants')
plt.show()
most_common_range = p.idxmax()
most_common_count = p.max()
print(f"The most common rating range is: {most_common_range} with {most_common_count} Restaurant.")

"""# **Calculate the average number of votes received by restaurants.**"""

average_votes=df["Votes"].mean()
print(f"the average number of votes received by restaurants: {average_votes:.2f}")

"""# **Task2: Cuisine Combination**

# **Identify the most common combinations of cuisines in the dataset.**
"""

c=df["Cuisines"].value_counts()
print("the most common combinations of cuisines are:", c.head(5))

"""# **Determine if certain cuisine combinations tend to have higher ratings.**"""

average_ratings = df.groupby("Cuisines")["Aggregate rating"].mean()
print(f"cuisine combination {average_ratings.idxmax()} has the highest rating is {average_ratings.max()}" )

"""# **Task3: Geographic Analysis**

# **Plot the locations of restaurants on a map using longitude and latitude coordinates.**
"""

plt.scatter(df["Longitude"], df["Latitude"], c="green")
plt.title("locations of restaurants")
plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.grid(True)
plt.show()

"""# **Identify any patterns or clusters of restaurants in specific areas.**"""

from sklearn.cluster import KMeans
X = df[["Longitude", "Latitude"]]
kmeans = KMeans(n_clusters=2, random_state=0).fit(X)
df['cluster'] = kmeans.labels_
plt.scatter(df["Longitude"], df["Latitude"], c=df["cluster"])
plt.title("Restaurant Locations")
plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.grid(True)
plt.show()

"""# **Task4: Restaurant Chains**

# **Identify if there are any restaurant chains present in the dataset.**
"""

counts = df["Restaurant Name"].value_counts()
chains = counts[counts > 1]
print("restaurant chains:",chains)

"""# **Analyze the ratings and popularity of different restaurant chains.**"""

chain = df.groupby('Restaurant Name').agg({
    'Aggregate rating': 'mean',
    'Votes': 'sum'
}).reset_index()
sorted_restaurants = chain.sort_values(by=['Aggregate rating',"Votes"], ascending=[False,False])
print(sorted_restaurants)